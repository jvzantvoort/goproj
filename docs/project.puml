@startuml
namespace project {
    class BaseTemplate << (S,Aquamarine) >> {
        + Name string
        + Version string

    }
    class EnvVar << (S,Aquamarine) >> {
        + RootPath string
        + Name string
        + Paths []string

        + Write(w io.Writer) 
        + Has(inputdir string) bool
        + Append(inputdir string) 
        + Prepend(inputdir string) 

    }
    class Environment << (S,Aquamarine) >> {
        + RootDir string
        + Vars <font color=blue>map</font>[string]EnvVar

    }
    class Executable << (S,Aquamarine) >> {
        + PathToScript string
        + OS string
        + Extensions []string

        + LookupExt() (string, error)
        + PrependExt(extstr string) 
        + AppendExt(extstr string) 

    }
    class Functions << (S,Aquamarine) >> {
        + Cwd string
        + ToolsPath string
        + Locations Locations

        + Which(command string) string
        + LookupExt(command string) (string, error)
        + Execute(command string, args ...string) ([]string, []string, error)
        + Setup(args ...string) ([]string, []string, error)
        + Teardown(args ...string) ([]string, []string, error)
        + Status(args ...string) ([]string, []string, error)
        + Backup(args ...string) ([]string, []string, error)
        + Build(args ...string) ([]string, []string, error)
        + Package(args ...string) ([]string, []string, error)
        + Publish(args ...string) ([]string, []string, error)
        + Test(args ...string) ([]string, []string, error)
        + SetupProject(args ...string) 
        + BuildProject(args ...string) 

    }
    class Locations << (S,Aquamarine) >> {
        + RootDir string

        + ConfigDir() string
        + ConfigFile() string
        + BinPath() string
        + ToolsPath() string
        + BackupDir(args ...string) string
        + BackupDirRotating(name string, max int) string

    }
    class MetaData << (S,Aquamarine) >> {
        + Project ProjectInfo
        + BaseTemplate BaseTemplate

    }
    class Project << (S,Aquamarine) >> {
        + MetaData MetaData
        + Locations Locations
        + Targets Targets
        + Functions Functions

        + Read(reader io.Reader) error
        + Write(writer io.Writer) error
        + WriteTable(writer io.Writer) 
        + IsGoProj() bool
        + ReadFromFile() error
        + WriteToFile() error
        + Name(args ...string) string
        + SetName(name string) 
        + Description(args ...string) string
        + SetDescription(description string) 
        + Save() 

    }
    class ProjectInfo << (S,Aquamarine) >> {
        + Name string
        + Description string

    }
    class Targets << (S,Aquamarine) >> {
        + Files []os.FileInfo
        + Repos []VCSUrl

    }
    class VCSUrl << (S,Aquamarine) >> {
        + Url string
        + Type string
        + Branch string
        + Destination string

    }
    class project.fn << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(...string) ([]string, []string, error)" as fontcolorbluefuncfontstringstringstringerror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


"project.fontcolorbluefuncfontstringstringstringerror" #.. "project.fn"
@enduml
